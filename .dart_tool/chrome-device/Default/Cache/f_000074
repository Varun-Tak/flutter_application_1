define(['dart_sdk', 'packages/flutter/src/rendering/sliver_multi_box_adaptor.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter_staggered_grid_view/src/rendering/tile_container_render_object_mixin.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/vector_math/vector_math_64.dart'], (function load__packages__flutter_staggered_grid_view__src__rendering__sliver_variable_size_box_adaptor_dart(dart_sdk, packages__flutter__src__rendering__sliver_multi_box_adaptor$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter_staggered_grid_view__src__rendering__tile_container_render_object_mixin$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__vector_math__vector_math_64$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const sliver_multi_box_adaptor = packages__flutter__src__rendering__sliver_multi_box_adaptor$46dart.src__rendering__sliver_multi_box_adaptor;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const sliver = packages__flutter__src__rendering__sliver$46dart.src__rendering__sliver;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const tile_container_render_object_mixin = packages__flutter_staggered_grid_view__src__rendering__tile_container_render_object_mixin$46dart.src__rendering__tile_container_render_object_mixin;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  var sliver_variable_size_box_adaptor = Object.create(dart.library);
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $values = dartx.values;
  var $forEach = dartx.forEach;
  var $clear = dartx.clear;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $toSet = dartx.toSet;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $join = dartx.join;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $keys = dartx.keys;
  var $sort = dartx.sort;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    RenderBoxL: () => (T.RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))(),
    IdentityMapOfintL$RenderBoxL: () => (T.IdentityMapOfintL$RenderBoxL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.RenderBoxL())))(),
    RenderObjectL: () => (T.RenderObjectL = dart.constFn(dart.legacy(object.RenderObject)))(),
    SliverVariableSizeBoxAdaptorParentDataL: () => (T.SliverVariableSizeBoxAdaptorParentDataL = dart.constFn(dart.legacy(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData)))(),
    SliverConstraintsL: () => (T.SliverConstraintsL = dart.constFn(dart.legacy(sliver.SliverConstraints)))(),
    SliverConstraintsLToNull: () => (T.SliverConstraintsLToNull = dart.constFn(dart.fnType(core.Null, [T.SliverConstraintsL()])))(),
    PipelineOwnerL: () => (T.PipelineOwnerL = dart.constFn(dart.legacy(object.PipelineOwner)))(),
    RenderBoxLTovoid: () => (T.RenderBoxLTovoid = dart.constFn(dart.fnType(dart.void, [T.RenderBoxL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    RenderBoxLToboolL: () => (T.RenderBoxLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.RenderBoxL()])))(),
    DiagnosticsNodeL: () => (T.DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))(),
    JSArrayOfDiagnosticsNodeL: () => (T.JSArrayOfDiagnosticsNodeL = dart.constFn(_interceptors.JSArray$(T.DiagnosticsNodeL())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: -1,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.up",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.right",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.down",
        index: 2
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: -1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.left",
        index: 3
      });
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "package:flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart",
    "file:///C:/Users/91935/Downloads/flutter_windows_2.0.4-stable/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_staggered_grid_view-0.3.4/lib/src/rendering/sliver_variable_size_box_adaptor.dart"
  ];
  sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager = class RenderSliverVariableSizeBoxChildManager extends core.Object {
    didStartLayout() {
    }
    didFinishLayout() {
    }
    debugAssertChildListLocked() {
      return true;
    }
  };
  (sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager.new = function() {
    ;
  }).prototype = sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager.prototype;
  dart.addTypeTests(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager);
  dart.addTypeCaches(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager);
  dart.setMethodSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager, () => ({
    __proto__: dart.getMethods(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager.__proto__),
    didStartLayout: dart.fnType(dart.void, []),
    didFinishLayout: dart.fnType(dart.void, []),
    debugAssertChildListLocked: dart.fnType(dart.legacy(core.bool), [])
  }));
  dart.setLibraryUri(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager, I[0]);
  var crossAxisOffset = dart.privateName(sliver_variable_size_box_adaptor, "SliverVariableSizeBoxAdaptorParentData.crossAxisOffset");
  var _keptAlive = dart.privateName(sliver_variable_size_box_adaptor, "_keptAlive");
  sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData = class SliverVariableSizeBoxAdaptorParentData extends sliver_multi_box_adaptor.SliverMultiBoxAdaptorParentData {
    get crossAxisOffset() {
      return this[crossAxisOffset];
    }
    set crossAxisOffset(value) {
      this[crossAxisOffset] = value;
    }
    toString() {
      return "crossAxisOffset=" + dart.str(this.crossAxisOffset) + "; " + dart.str(super.toString());
    }
  };
  (sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.new = function() {
    this[crossAxisOffset] = null;
    this[_keptAlive] = false;
    sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__.new.call(this);
    ;
  }).prototype = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.prototype;
  dart.addTypeTests(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData);
  dart.addTypeCaches(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData);
  dart.setMethodSignature(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, () => ({
    __proto__: dart.getMethods(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, I[0]);
  dart.setFieldSignature(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, () => ({
    __proto__: dart.getFields(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__),
    crossAxisOffset: dart.fieldType(dart.legacy(core.double)),
    [_keptAlive]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, ['toString']);
  var _keepAliveBucket = dart.privateName(sliver_variable_size_box_adaptor, "_keepAliveBucket");
  var _childManager = dart.privateName(sliver_variable_size_box_adaptor, "_childManager");
  var _debugAssertChildListLocked = dart.privateName(sliver_variable_size_box_adaptor, "_debugAssertChildListLocked");
  var _createOrObtainChild = dart.privateName(sliver_variable_size_box_adaptor, "_createOrObtainChild");
  var _destroyOrCacheChild = dart.privateName(sliver_variable_size_box_adaptor, "_destroyOrCacheChild");
  var _name = dart.privateName(basic_types, "_name");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  const RenderSliver_TileContainerRenderObjectMixin$36 = class RenderSliver_TileContainerRenderObjectMixin extends sliver.RenderSliver {};
  (RenderSliver_TileContainerRenderObjectMixin$36.new = function() {
    tile_container_render_object_mixin.TileContainerRenderObjectMixin$(dart.legacy(box.RenderBox), dart.legacy(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData))[dart.mixinNew].call(this);
    RenderSliver_TileContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderSliver_TileContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderSliver_TileContainerRenderObjectMixin$36, tile_container_render_object_mixin.TileContainerRenderObjectMixin$(dart.legacy(box.RenderBox), dart.legacy(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData)));
  const RenderSliver_RenderSliverWithKeepAliveMixin$36 = class RenderSliver_RenderSliverWithKeepAliveMixin extends RenderSliver_TileContainerRenderObjectMixin$36 {};
  (RenderSliver_RenderSliverWithKeepAliveMixin$36.new = function() {
    RenderSliver_RenderSliverWithKeepAliveMixin$36.__proto__.new.call(this);
  }).prototype = RenderSliver_RenderSliverWithKeepAliveMixin$36.prototype;
  dart.applyMixin(RenderSliver_RenderSliverWithKeepAliveMixin$36, sliver_multi_box_adaptor.RenderSliverWithKeepAliveMixin);
  const RenderSliver_RenderSliverHelpers$36 = class RenderSliver_RenderSliverHelpers extends RenderSliver_RenderSliverWithKeepAliveMixin$36 {};
  (RenderSliver_RenderSliverHelpers$36.new = function() {
    RenderSliver_RenderSliverHelpers$36.__proto__.new.call(this);
  }).prototype = RenderSliver_RenderSliverHelpers$36.prototype;
  dart.applyMixin(RenderSliver_RenderSliverHelpers$36, sliver.RenderSliverHelpers);
  sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor = class RenderSliverVariableSizeBoxAdaptor extends RenderSliver_RenderSliverHelpers$36 {
    setupParentData(child) {
      T.RenderObjectL().as(child);
      if (!T.SliverVariableSizeBoxAdaptorParentDataL().is(child.parentData)) {
        child.parentData = new sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.new();
      }
    }
    get childManager() {
      return this[_childManager];
    }
    adoptChild(child) {
      T.RenderObjectL().as(child);
      super.adoptChild(child);
      let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
      if (!dart.test(childParentData[_keptAlive])) this.childManager.didAdoptChild(T.RenderBoxL().as(child));
    }
    [_debugAssertChildListLocked]() {
      return this.childManager.debugAssertChildListLocked();
    }
    remove(index) {
      let child = this._get(index);
      if (child == null) {
        let cachedChild = this[_keepAliveBucket][$_get](index);
        if (cachedChild != null) {
          this.dropChild(cachedChild);
          this[_keepAliveBucket][$remove](index);
        }
        return;
      }
      let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
      if (!dart.test(childParentData[_keptAlive])) {
        super.remove(index);
        return;
      }
      if (!dart.equals(this[_keepAliveBucket][$_get](childParentData.index), child)) dart.assertFailed(null, I[1], 225, 12, "_keepAliveBucket[childParentData.index] == child");
      this[_keepAliveBucket][$remove](childParentData.index);
      this.dropChild(child);
    }
    removeAll() {
      super.removeAll();
      this[_keepAliveBucket][$values][$forEach](dart.bind(this, 'dropChild'));
      this[_keepAliveBucket][$clear]();
    }
    [_createOrObtainChild](index) {
      this.invokeLayoutCallback(T.SliverConstraintsL(), dart.fn(constraints => {
        if (!dart.equals(constraints, this.constraints)) dart.assertFailed(null, I[1], 239, 14, "constraints == this.constraints");
        if (dart.test(this[_keepAliveBucket][$containsKey](index))) {
          let child = this[_keepAliveBucket][$remove](index);
          let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
          if (!dart.test(childParentData[_keptAlive])) dart.assertFailed(null, I[1], 244, 16, "childParentData._keptAlive");
          this.dropChild(child);
          child.parentData = childParentData;
          this._set(index, child);
          childParentData[_keptAlive] = false;
        } else {
          this[_childManager].createChild(index);
        }
      }, T.SliverConstraintsLToNull()));
    }
    [_destroyOrCacheChild](index) {
      let child = this._get(index);
      let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
      if (dart.test(childParentData.keepAlive)) {
        if (!!dart.test(childParentData[_keptAlive])) dart.assertFailed(null, I[1], 260, 14, "!childParentData._keptAlive");
        this.remove(index);
        this[_keepAliveBucket][$_set](childParentData.index, child);
        child.parentData = childParentData;
        super.adoptChild(child);
        childParentData[_keptAlive] = true;
      } else {
        if (!dart.equals(child.parent, this)) dart.assertFailed(null, I[1], 267, 14, "child.parent == this");
        this[_childManager].removeChild(child);
        if (!(child.parent == null)) dart.assertFailed(null, I[1], 269, 14, "child.parent == null");
      }
    }
    attach(owner) {
      T.PipelineOwnerL().as(owner);
      super.attach(owner);
      this[_keepAliveBucket][$values][$forEach](dart.fn(child => child.attach(owner), T.RenderBoxLTovoid()));
    }
    detach() {
      super.detach();
      this[_keepAliveBucket][$values][$forEach](dart.fn(child => child.detach(), T.RenderBoxLTovoid()));
    }
    redepthChildren() {
      super.redepthChildren();
      this[_keepAliveBucket][$values][$forEach](dart.bind(this, 'redepthChild'));
    }
    visitChildren(visitor) {
      super.visitChildren(visitor);
      this[_keepAliveBucket][$values][$forEach](visitor);
    }
    addChild(index) {
      if (!dart.test(this[_debugAssertChildListLocked]())) dart.assertFailed(null, I[1], 298, 12, "_debugAssertChildListLocked()");
      this[_createOrObtainChild](index);
      let child = this._get(index);
      if (child != null) {
        if (!(this.indexOf(child) == index)) dart.assertFailed(null, I[1], 302, 14, "indexOf(child) == index");
        return true;
      }
      this.childManager.setDidUnderflow(true);
      return false;
    }
    addAndLayoutChild(index, childConstraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (!dart.test(this[_debugAssertChildListLocked]())) dart.assertFailed(null, I[1], 314, 12, "_debugAssertChildListLocked()");
      this[_createOrObtainChild](index);
      let child = this._get(index);
      if (child != null) {
        if (!(this.indexOf(child) == index)) dart.assertFailed(null, I[1], 318, 14, "indexOf(child) == index");
        child.layout(childConstraints, {parentUsesSize: parentUsesSize});
        return child;
      }
      this.childManager.setDidUnderflow(true);
      return null;
    }
    collectGarbage(visibleIndices) {
      if (!dart.test(this[_debugAssertChildListLocked]())) dart.assertFailed(null, I[1], 337, 12, "_debugAssertChildListLocked()");
      if (!(dart.notNull(this.childCount) >= dart.notNull(visibleIndices[$length]))) dart.assertFailed(null, I[1], 338, 12, "childCount >= visibleIndices.length");
      this.invokeLayoutCallback(T.SliverConstraintsL(), dart.fn(constraints => {
        this.indices[$toSet]().difference(visibleIndices)[$forEach](dart.bind(this, _destroyOrCacheChild));
        this[_keepAliveBucket][$values][$where](dart.fn(child => {
          let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
          return !dart.test(childParentData.keepAlive);
        }, T.RenderBoxLToboolL()))[$toList]()[$forEach](dart.bind(this[_childManager], 'removeChild'));
        if (!dart.test(this[_keepAliveBucket][$values][$where](dart.fn(child => {
          let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
          return !dart.test(childParentData.keepAlive);
        }, T.RenderBoxLToboolL()))[$isEmpty])) dart.assertFailed(null, I[1], 354, 14, "_keepAliveBucket.values.where((RenderBox child) {\r\n        final SliverVariableSizeBoxAdaptorParentData childParentData =\r\n            child.parentData;\r\n        return !childParentData.keepAlive;\r\n      }).isEmpty");
      }, T.SliverConstraintsLToNull()));
    }
    indexOf(child) {
      if (!(child != null)) dart.assertFailed(null, I[1], 365, 12, "child != null");
      let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
      if (!(childParentData.index != null)) dart.assertFailed(null, I[1], 368, 12, "childParentData.index != null");
      return childParentData.index;
    }
    paintExtentOf(child) {
      if (!(child != null)) dart.assertFailed(null, I[1], 376, 12, "child != null");
      if (!dart.test(child.hasSize)) dart.assertFailed(null, I[1], 377, 12, "child.hasSize");
      switch (this.constraints.axis) {
        case C[0] || CT.C0:
        {
          return child.size.width;
        }
        case C[1] || CT.C1:
        {
          return child.size.height;
        }
      }
      return null;
    }
    hitTestChildren(result, opts) {
      let mainAxisPosition = opts && 'mainAxisPosition' in opts ? opts.mainAxisPosition : null;
      let crossAxisPosition = opts && 'crossAxisPosition' in opts ? opts.crossAxisPosition : null;
      for (let child of this.children) {
        if (dart.test(this.hitTestBoxChild(new box.BoxHitTestResult.wrap(result), child, {mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition}))) return true;
      }
      return false;
    }
    childMainAxisPosition(child) {
      T.RenderBoxL().as(child);
      return dart.notNull(this.childScrollOffset(child)) - dart.notNull(this.constraints.scrollOffset);
    }
    childCrossAxisPosition(child) {
      T.RenderBoxL().as(child);
      let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
      return childParentData.crossAxisOffset;
    }
    childScrollOffset(child) {
      T.RenderObjectL().as(child);
      if (!(child != null)) dart.assertFailed(null, I[1], 412, 12, "child != null");
      if (!dart.equals(child.parent, this)) dart.assertFailed(null, I[1], 413, 12, "child.parent == this");
      let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
      if (!(childParentData.layoutOffset != null)) dart.assertFailed(null, I[1], 416, 12, "childParentData.layoutOffset != null");
      return childParentData.layoutOffset;
    }
    applyPaintTransform(child, transform) {
      T.RenderObjectL().as(child);
      this.applyPaintTransformForBoxChild(T.RenderBoxL().as(child), transform);
    }
    paint(context, offset) {
      if (this.childCount === 0) return;
      let mainAxisUnit = null;
      let crossAxisUnit = null;
      let originOffset = null;
      let addExtent = null;
      switch (sliver.applyGrowthDirectionToAxisDirection(this.constraints.axisDirection, this.constraints.growthDirection)) {
        case C[4] || CT.C4:
        {
          mainAxisUnit = C[2] || CT.C2;
          crossAxisUnit = C[3] || CT.C3;
          originOffset = offset['+'](new ui.Offset.new(0.0, this.geometry.paintExtent));
          addExtent = true;
          break;
        }
        case C[6] || CT.C6:
        {
          mainAxisUnit = C[3] || CT.C3;
          crossAxisUnit = C[5] || CT.C5;
          originOffset = offset;
          addExtent = false;
          break;
        }
        case C[7] || CT.C7:
        {
          mainAxisUnit = C[5] || CT.C5;
          crossAxisUnit = C[3] || CT.C3;
          originOffset = offset;
          addExtent = false;
          break;
        }
        case C[9] || CT.C9:
        {
          mainAxisUnit = C[8] || CT.C8;
          crossAxisUnit = C[5] || CT.C5;
          originOffset = offset['+'](new ui.Offset.new(this.geometry.paintExtent, 0.0));
          addExtent = true;
          break;
        }
      }
      if (!(mainAxisUnit != null)) dart.assertFailed(null, I[1], 459, 12, "mainAxisUnit != null");
      if (!(addExtent != null)) dart.assertFailed(null, I[1], 460, 12, "addExtent != null");
      for (let child of this.children) {
        let mainAxisDelta = this.childMainAxisPosition(child);
        let crossAxisDelta = this.childCrossAxisPosition(child);
        let childOffset = new ui.Offset.new(dart.notNull(originOffset.dx) + dart.notNull(mainAxisUnit.dx) * dart.notNull(mainAxisDelta) + dart.notNull(crossAxisUnit.dx) * dart.notNull(crossAxisDelta), dart.notNull(originOffset.dy) + dart.notNull(mainAxisUnit.dy) * dart.notNull(mainAxisDelta) + dart.notNull(crossAxisUnit.dy) * dart.notNull(crossAxisDelta));
        if (dart.test(addExtent)) childOffset = childOffset['+'](mainAxisUnit['*'](this.paintExtentOf(child)));
        context.paintChild(child, childOffset);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(diagnostics.DiagnosticsNode.message(dart.notNull(this.childCount) > 0 ? "currently live children: " + dart.str(this.indices[$join](",")) : "no children current live"));
    }
    debugDescribeChildren() {
      let t0;
      let childList = T.JSArrayOfDiagnosticsNodeL().of([]);
      if (dart.notNull(this.childCount) > 0) {
        for (let child of this.children) {
          let childParentData = T.SliverVariableSizeBoxAdaptorParentDataL().as(child.parentData);
          childList[$add](child.toDiagnosticsNode({name: "child with index " + dart.str(childParentData.index)}));
        }
      }
      if (dart.test(this[_keepAliveBucket][$isNotEmpty])) {
        let indices = (t0 = this[_keepAliveBucket][$keys][$toList](), (() => {
          t0[$sort]();
          return t0;
        })());
        for (let index of indices) {
          childList[$add](this[_keepAliveBucket][$_get](index).toDiagnosticsNode({name: "child with index " + dart.str(index) + " (kept alive offstage)", style: diagnostics.DiagnosticsTreeStyle.offstage}));
        }
      }
      return childList;
    }
  };
  (sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.new = function(opts) {
    let childManager = opts && 'childManager' in opts ? opts.childManager : null;
    this[_keepAliveBucket] = new (T.IdentityMapOfintL$RenderBoxL()).new();
    if (!(childManager != null)) dart.assertFailed(null, I[1], 171, 16, "childManager != null");
    this[_childManager] = childManager;
    sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__.new.call(this);
    ;
  }).prototype = sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.prototype;
  dart.addTypeTests(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor);
  dart.addTypeCaches(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor);
  dart.setMethodSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, () => ({
    __proto__: dart.getMethods(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__),
    adoptChild: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_debugAssertChildListLocked]: dart.fnType(dart.legacy(core.bool), []),
    [_createOrObtainChild]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    [_destroyOrCacheChild]: dart.fnType(dart.void, [dart.legacy(core.int)]),
    addChild: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)]),
    addAndLayoutChild: dart.fnType(dart.legacy(box.RenderBox), [dart.legacy(core.int), dart.legacy(box.BoxConstraints)], {parentUsesSize: dart.legacy(core.bool)}, {}),
    collectGarbage: dart.fnType(dart.void, [dart.legacy(core.Set$(dart.legacy(core.int)))]),
    indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(box.RenderBox)]),
    paintExtentOf: dart.fnType(dart.legacy(core.double), [dart.legacy(box.RenderBox)]),
    hitTestChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(hit_test.HitTestResult)], {crossAxisPosition: dart.legacy(core.double), mainAxisPosition: dart.legacy(core.double)}, {}),
    childMainAxisPosition: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Object)]),
    childCrossAxisPosition: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Object)]),
    childScrollOffset: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Object)]),
    applyPaintTransform: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(vector_math_64.Matrix4)]),
    paint: dart.fnType(dart.void, [dart.legacy(object.PaintingContext), dart.legacy(ui.Offset)]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setGetterSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, () => ({
    __proto__: dart.getGetters(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__),
    childManager: dart.legacy(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager)
  }));
  dart.setLibraryUri(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, I[0]);
  dart.setFieldSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, () => ({
    __proto__: dart.getFields(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__),
    [_childManager]: dart.finalFieldType(dart.legacy(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager)),
    [_keepAliveBucket]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(box.RenderBox))))
  }));
  dart.trackLibraries("packages/flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart", {
    "package:flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart": sliver_variable_size_box_adaptor
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sliver_variable_size_box_adaptor.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../D:/packages/flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__sliver_variable_size_box_adaptor: sliver_variable_size_box_adaptor
  };
}));

//# sourceMappingURL=sliver_variable_size_box_adaptor.dart.lib.js.map
